// Pute here list of PROCESESS
// use https://github.com/truemoid/sublime-dm-macro/blob/master/snippets as reference

// TODO: add help on parameters on the description section
{
  "Accumulate":{
     "prefix":"!ACCMLT",
     "body":[
        "!ACCMLT &in($1),&out($2),*key1($3),",
        "        *key2($4),@allrecs=${5:0},@unsorted=${6:1}"
     ],
     "description":[
        "Accumulates sub-totals for up to 25 numeric fields",
        "for constant values of a keyfield."
     ]
  },
  "Add extra field":{
     "prefix":"!ADDDD",
     "body":[
        "!ACCMLT &in($1),&out($2)",
        "${3:file description}",
        "${4:FIELD1 n y -}",
        "${5:FIELD2 a 8 y ''}"
     ],
     "description":[
        "Adds extra fields to a file, ",
        "requesting the field names and parameters interactively, ",
        "in the same way as that used for entering a new Data Definition."
     ]
  },
  "Add block model":{
     "prefix":"!ADDMOD",
     "body":[
        "!ADDMOD !&in1($1),&in2($2),&out($3),",
        "        @tolernce=${4:0.001}"
     ],
     "description":[
        "Adds two models together by superimposing one onto another"
     ]
  },
  "Add wireframes":{
     "prefix":"!ADDTRI",
     "body":[
        "!ADDTRI &wiretr1($1tr),&wirept1($1pt),",
        "        &wiretr2($2tr),&wirept2($2pt),",
        "        &wiretrou($3tr),&wireptou($3pt)"
     ],
     "description":[
        "Combines two pairs of wireframe model files, into a single pair of output files"
     ]
  },
  "Edit files":{
     "prefix":"!AED",
     "body":[
        "!EAD &in($1),&defn($2),",
        "     &apphlp($3),&out($4)"
     ],
     "description":[
        "File editor for creation, validation and modification of files"
     ]
  },
  "Alpha tto numeric":{
     "prefix":"!ALFNUM",
     "body":[
        "!alfnum &in($1)${2:,&fieldlst()},&out($3),",
        "       *f1($4),*f2($5),*f3($6),*f4($7)${8:,*fieldnam()}"
     ],
     "description":[
        "Copies a file while converting given alphanumeric fields to numeric."
     ]
  },
  "Create anisotropic input":{
     "prefix":"!ANISOANG",
     "body":[
        "!ANISOANG &planstr($1),&sectstr($2),",
        "       &wiretr($3tr),&wirept($3pt),&points($4),",
        "       *zone($5),",
        "       @tripts=${6:1},@planmode=${7:1},@sectmode=${8:1},",
        "       @mindip=${9:-90},@maxdip=${10:90},@mindirn=$11,@maxdirn=$12,",
        "       @addsymb=${13:0},@plansymb=${14:216},@sectsymb=${15:216},@wfsymb=${16:224},",
        "       @plancol=${17:1},@sectcol=${18:2},@wfcol=${19:3},@symsize=${20:2}"
     ],
     "description":[
        "Aprocess to assist with creating anisotropic input data for modelling processes"
     ]
  },
  "ANOVA statistics":{
     "prefix":"!ANOVA1",
     "body":[
        "!ANOVA1 &in($1)",
        "       *value($2),",
        "       *key1($3),*key2($4),*key3($5),*key4($6)"
     ],
     "description":[
        "Aprocess to assist with creating anisotropic input data for modelling processes"
     ]
  },
  "Append files":{
     "prefix":"!APTOTRUE",
     "body":[
        "!APTOTRUE &in($1),&out($2)",
        "       *apdip(${3:APDIP}),*trdipdir(${4:TRDIPDIR}),*trdip(${5:TRDIP}),",
        "       @apdipdir=${6:0}"
     ],
     "description":[
        "Aprocess to assist with creating anisotropic input data for modelling processes"
     ]
  },
  "Update by sample number":{
     "prefix":"!ASTRAN",
     "body":[
        "!ASTRAN &in($1),&xref($2)",
        "       *sampleid(${3:SAMPLEID}),",
        "       @sprefix=${4:2},@sdigits=${5:6},@maxerrs=$6,@update=${7:0}"
     ],
     "description":[
        "Thisprocess reads one or more assay files and updates a  file by matching sample numbers."
     ]
  },
  "Check legend definition":{
     "prefix":"!ATTCHK",
     "body":[
        "!ATTCHK &in($1),&out($2),&error($3)"
     ],
     "description":[
        "This process is used to check the legend definition file prior to running ATTSET"
     ]
  },
  "Set value of field based on data field":{
     "prefix":"!ATTSET",
     "body":[
        "!ATTSET &in($1),&legend($2),&out($3),",
        "       *datfld1($4),*datfld2($5),*datfld3($6),*datfld4($7),",
        "       *attrib1($8),*attrib2($9),*attrib3($10),*attrib4($11),",
        "       @mode=${12:0},@inrange=${13:0}"
     ],
     "description":[
        "Set values of nominated attribute fields in a file based on the values of a given data field in the input file."
     ]
  },
  "Quantify anomalous thresholds on grid":{
     "prefix":"!AUTOCR",
     "body":[
        "!AUTOCR &in($1),&out($2),",
        "       *sampid($3),",
        "       *f1($4),*f2($5),*f3($6),*f4($7),",
        "       @sampdist=${8:0},@print=${9:0}"
     ],
     "description":[
        "Quantify and define anomalous thresholds and halo size on regularly-gridded soil sample lines."
     ]
  },
  "Autofit variogram":{
     "prefix":"!AUTOVMOD",
     "body":[
        "!AUTOVMOD &vgrams($1),&nugget($2),",
        "       &sills($3),&structs($4),&vmodel($5),",
        "       @VSETNUM=${6:1},  @MINNUGPC=${7:1},",
        "       @MINSILPC=${7:5}, @MAXSTRCT=${8:3},",
        "       @MAXIT=${9:1000.0}, @MULTIVAR=${10:1.0},",
        "       @ANISO=${11:1}"
     ],
     "description":[
        "Automaticallyfit variogram and cross-variogram models to experimental variogrammodel data"
     ]
  },
  "Back-transformation":{
     "prefix":"!BACKTR",
     "body":[
        "!BACKTR &in1($1),&refdist($2),&out($3),",
        "       *normval($4),*origref($5),*normref($6),*backval($7),",
        "       @minnorm=$8,@maxnorm=$9,@minback=$10,@maxback=$11,",
        "       @lotail=${12:1},@lopar=$13,@uptail=${14:2},@uppar=$15"
     ],
     "description":[
        "Back-transformation from normal distribution."
     ]
  },
  "Count of drillholes":{
     "prefix":"!BHCOUNT",
     "body":[
        "!BHCOUNT &modelin($1),&sampin($2),&modelout($3),",
        "       *key(${4:BHID},*value($5),",
        "       @parent=${6:1}"
     ],
     "description":[
        "Count of drillholes to estimate each block."
     ]
  },
  "Perimeters around blocks":{
     "prefix":"!BLKPER",
     "body":[
        "!BLKPER &in($1),&out($2),",
        "       @direct=${3:1},@startpos=$4,@stepsize=$5,@numplane=$6,",
        "       @smooth=${7:0},@connect=${8:1},@bradjust=${9:0}"
     ],
     "description":[
        "Creates a set of perimeters around blocks in a model file."
     ]
  },
  "Blocks to wireframe":{
     "prefix":"!BLKTRI",
     "body":[
        "!BLKTRI &in($1),&wiretr($2tr),&wirept($2pt),",
        "       *class($3),*modcol($4),",
        "       @plane=${5:0},@xsubcell=${6:1},@ysubcell=${7:1},@zsubcell=${8:1},",
        "       @order=${9:0},@surface=${10:3},@colour=${11:1}"
     ],
     "description":[
        "Converts block model(s) to wireframe surfaces(s)."
     ]
  },
  "Canonical analysis":{
     "prefix":"!CANON",
     "body":[
        "!CANON &in($1),&scores($2),",
        "       *sampid($3),",
        "       *f1($4),*f2($5),*f3($6),*f4($7),",
        "       @nleft=$8,@print=${9:0}"
     ],
     "description":[
        "Defines mineralized and background by canonical vectors and scores on the basis of two variates"
     ]
  },
  "Transform coordinates":{
     "prefix":"!CDTRAN",
     "body":[
        "!CDTRAN &in($1),&protorot($2),&out($3),",
        "       *x($4),*y($5),*z($6),",
        "       *newx($7),*newy($8),*newz($9),",
        "       @angle1=${10:0},@angle2=${11:0},@angle3=${12:0},",
        "       @rotaxis1=${13:0},@rotaxis2=${14:0},@rotaxis3=${15:0},",
        "       @x0=${16:0},@y0=${17:0},@z0=${18:0},@xr0=${19:0},@yr0=${20:0},@zr0=${21:0},",
        "       @factor=${22:1},@inverse=${23:0},@print=${24:0}" 
     ],
     "description":[
        "General three-dimensional coordinate rotation and translation."
     ]
  },
  "Confidence from simulations":{
     "prefix":"!CELLCONF",
     "body":[
        "!CELLCONF &statmod($1),&cutoff($2),&conf_tbl($3),",
        "       &conf_plt($4),@cutint($5),@cutmax($6),",
        "       @plot_tbl($7),@display($8)" 
     ],
     "description":[
        "Creates a summary table and graph of confidence for parent cells in a block model",
        " which has been created using conditional simulation."
     ]
  },
  "Channel to drillhole":{
     "prefix":"!CHANNL3D",
     "body":[
        "!CHANNL3D &survpts($1),&sample1($2),&sample2($3),",
        "       &out($4),&chansmry($5),&errors($6),",
        "       *bhid($7),*xpt($8),*ypt($9),*zpt($10),*from($11),*to($12),",
        "       @extend($13:1),@endpoint($14:1)" 
     ],
     "description":[
        "converts Channel data and survey into a 'desurveyed' drillholes."
     ]
  },
  "Data to chart":{
     "prefix":"!CHART",
     "body":[
        "!CHART &in($1),&proto($2),&anno($3),",
        "       &out($4),&plot($5),",
        "       *x($6),*y($7),*weight($8),",
        "       *key1($9),*key2($10),*key3($11),",
        "       @charttyp=${12:1},@histtyp=${13:1},@binsize=${14:1},@binmin=${15:0},",
        "       @binmax=$16,@binmeth=${17:1},@xtrans=${18:1},@ytrans=${19:1},",
        "       @logmin=${20:0.01},@frametyp=${21:2},@xfactor=${22:1},@yfactor=${23:1},",
        "       @linetyp1=${24:1},@symbol1=${25:92},@symsize1=${26:3},@colour1=${27:12},",
        "       @linetyp2=${28:0},@symbol2=${29:0},@symsize2=${30:3},@colour2=${31:0},",
        "       @append=${32:0},@colflag=${33:1},@legend=$34,@legchsiz=${35:3},",
        "       @tcharsz=${36:3},@tcolour=${37:12},@xinc=$38,@yinc=$39,",
        "       @ndx=$40,@ndy=$41,@igrid=${42:3},@fcharsz=${43:3},",
        "       @fcolour=${44:12},@xpaper=${45:240},@ypaper=${46:200},@xmin=$47,",
        "       @xmax=$48,@ymin=$49,@ymax=$50,@xscale=$51,@yscale=$52,",
        "       @progress=${53:1},@display=${54:1}" 
     ],
     "description":[
        "Transforms data into a suitable format for creating charts", 
        "andoptionally creates and displays a draft quality plot."
     ]
  },
  "Validate a string file":{
     "prefix":"!CHECKIT",
     "body":[
        "!CHECKIT &in($1),&out($2)" 
     ],
     "description":[
        "Validate a string file."
     ]
  },
  "Check wireframe files":{
     "prefix":"!CHKTRI",
     "body":[
        "!CHKTRI &wiretrin($1tr),&wireptin($1pt),",
        "        &wiretrou($2tr),&wireptou($2pt),",
        "        @remdupid=${3:0}"
     ],
     "description":[
        "Check wireframe files."
     ]
   },
   "Find closely spaced collars or points":{
      "prefix":"!CLOSEPTS",
      "body":[
         "!CLOSEPTS &holes($1),&points($2),",
         "        &closhole($3),&closepts($4),",
         "        &bhstr($5),&ptsstr($4),",
         "        *bhid(${6:BHID}),*x(${7:X}),*y(${8:Y}),*z(${9:Z}),",
         "        @distance=${10:20}"
      ],
      "description":[
         "Check wireframe files."
      ]
   },
  "Cluster/Dendogram":{
     "prefix":"!CLUSTR",
     "body":[
        "!CLUSTR &in($1),&matxin($2),",
        "        &wiretrou($2tr),&wireptou($2pt),",
        "        @remdupid=${3:0}"
     ],
     "description":[
        "Crates a cluster analysis (dendogram)"
     ]
  },
  "triangle dip and dip direction":{
     "prefix":"!COGTRI",
     "body":[
        "COGTRI &wtrin($1tr),&wptin($1pt),",
        "        &wtrout($2tr),&wptout($2pt),&ptnout($3),",
        "        @vertex=${4:0},@symbol=${5:216},@symsize=${6:2}"
     ],
     "description":[
        "Calculates the centre point and the dip and dip direction of each triangle in a wireframe."
     ]
  },
  "estimation using univariate and multivariate":{
     "prefix":"!COKRIG",
     "body":[
        "COKRIG &samples($1),&proto($2),",
        "        &epar($3),&filds($4),&vmodel($5),&spar($6),",
        "        &outmodel($7),&sampout($8),",
        "        *XPT({$9:XPT}), *YPT({$10:YPT}), *ZPT({$11:ZPT}),",
        "        *zone1_f($12), *zone2_f($12),",
        "        *sangl1_f($13), *sangl2_f($14), *sangl3_f($15),",
        "        *vangl1_f($16), *vangl2_f($17), *vangl3_f($18),",
        "        @nthreads={$19:1},",
        "        @da_axis1={$20:3}, da_axis2={$21:1},da_axis3={$22:3}"
     ],
     "description":[
        "Estimation using univariate and multivariate methods:",
        "ordinary, simple kriging, inverse distance weighting and nearest neighbor."
     ]
  }
}